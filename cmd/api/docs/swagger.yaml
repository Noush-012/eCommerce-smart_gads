definitions:
  domain.Admin:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      password:
        maxLength: 30
        minLength: 5
        type: string
      updated_at:
        type: string
      user_name:
        maxLength: 15
        minLength: 4
        type: string
    required:
    - password
    type: object
  request.AddToCartReq:
    properties:
      product_item_id:
        type: integer
      quantity:
        type: integer
      user_id:
        type: integer
    required:
    - product_item_id
    - quantity
    type: object
  request.AddToWishlist:
    properties:
      product_item_id:
        type: integer
      quantity:
        type: integer
    required:
    - product_item_id
    - quantity
    type: object
  request.Address:
    properties:
      address_id:
        type: integer
      address_line_1:
        type: string
      address_line_2:
        type: string
      city:
        type: string
      country:
        type: string
      house:
        type: string
      is_default:
        type: boolean
      state:
        type: string
      zip_code:
        type: string
    type: object
  request.AddressPatchReq:
    properties:
      address_id:
        type: integer
      address_line_1:
        type: string
      address_line_2:
        type: string
      city:
        type: string
      country:
        type: string
      house:
        type: string
      is_default:
        type: boolean
      state:
        type: string
      zip_code:
        type: string
    type: object
  request.ApproveReturnRequest:
    properties:
      comment:
        type: string
      is_approved:
        type: boolean
      order_id:
        type: integer
      return_id:
        type: integer
      user_id:
        type: integer
    type: object
  request.CategoryReq:
    properties:
      brand_category_name:
        type: string
      id:
        type: integer
      parent_id:
        type: integer
    type: object
  request.CreateCoupon:
    properties:
      code:
        type: string
      discount_max_amount:
        type: number
      discount_percent:
        type: number
      min_order_value:
        type: number
      valid_till:
        type: string
    type: object
  request.DeleteCartItemReq:
    properties:
      product_item_id:
        type: integer
    required:
    - product_item_id
    type: object
  request.DeleteProductReq:
    properties:
      Prod_id:
        type: integer
    required:
    - Prod_id
    type: object
  request.LoginData:
    properties:
      email:
        type: string
      password:
        maxLength: 30
        minLength: 5
        type: string
      user_name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - password
    type: object
  request.OTPVerify:
    properties:
      otp:
        maxLength: 8
        minLength: 4
        type: string
      user_id:
        type: integer
    required:
    - otp
    - user_id
    type: object
  request.ProductItemReq:
    properties:
      SKU:
        type: string
      configurations:
        additionalProperties:
          $ref: '#/definitions/request.Variation'
        type: object
      discount_price:
        type: integer
      images:
        items:
          type: string
        type: array
      price:
        type: integer
      product_id:
        type: integer
      qty_in_stock:
        type: integer
    required:
    - SKU
    - configurations
    - images
    - product_id
    - qty_in_stock
    type: object
  request.ProductReq:
    properties:
      brand_id:
        type: integer
      description:
        maxLength: 1000
        minLength: 10
        type: string
      image:
        type: string
      price:
        type: integer
      product_name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - brand_id
    - description
    - image
    - price
    - product_name
    type: object
  request.RazorpayReq:
    properties:
      coupon_code:
        type: string
    type: object
  request.SignupUserData:
    properties:
      age:
        type: integer
      confirm_password:
        type: string
      email:
        type: string
      first_name:
        maxLength: 50
        minLength: 2
        type: string
      last_name:
        maxLength: 50
        minLength: 1
        type: string
      password:
        type: string
      phone:
        maxLength: 10
        minLength: 10
        type: string
      user_name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - age
    - confirm_password
    - email
    - first_name
    - last_name
    - password
    - phone
    - user_name
    type: object
  request.UpdateCartReq:
    properties:
      product_item_id:
        type: integer
      quantity:
        type: integer
    required:
    - product_item_id
    - quantity
    type: object
  request.UpdateCoupon:
    properties:
      code:
        type: string
      discount_max_amount:
        type: number
      discount_percent:
        type: number
      id:
        type: integer
      min_order_value:
        type: number
      valid_till:
        type: string
    type: object
  request.UpdateProductReq:
    properties:
      brand_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      image:
        type: string
      price:
        type: integer
      product_name:
        type: string
    type: object
  request.UpdateStatus:
    properties:
      order_id:
        type: integer
      status_id:
        type: integer
      user_id:
        type: integer
    required:
    - order_id
    - status_id
    - user_id
    type: object
  request.UserID:
    properties:
      user_id:
        type: integer
    required:
    - user_id
    type: object
  request.Variation:
    properties:
      variation_option_id:
        type: integer
    type: object
  response.Response:
    properties:
      data: {}
      errors: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
info:
  contact: {}
paths:
  /:
    get:
      description: after user login user will seen this page with user informations
      operationId: User Home
      responses:
        "200":
          description: Welcome to home !
      security:
      - ApiKeyAuth: []
      summary: api for user home page
      tags:
      - User
  /account:
    get:
      operationId: Account
      responses:
        "200":
          description: Successfully user account details found
        "500":
          description: faild to show user details
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for see user details
      tags:
      - User
  /account/address:
    post:
      description: get a new address from user to store the the database
      operationId: AddAddress
      parameters:
      - description: Input Field
        in: body
        name: inputs
        required: true
        schema:
          $ref: '#/definitions/request.Address'
      responses:
        "200":
          description: Successfully address added
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: inavlid input
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for adding a new address for user
      tags:
      - User
  /address:
    delete:
      description: user can delete a address
      operationId: DeleteAddress
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Address deleted successfuly
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for delete user address
      tags:
      - User
    get:
      description: user can get address
      operationId: GetAllAddress
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      responses:
        "200":
          description: Get all address successful
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to get all address
      tags:
      - User
    put:
      description: user can update a address
      operationId: UpdateAddress
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.AddressPatchReq'
      responses:
        "200":
          description: Address updated successfuly
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for update user address
      tags:
      - User
  /admin:
    get:
      operationId: AdminHome
      responses:
        "200":
          description: Welcome to Admin Home
          schema:
            $ref: '#/definitions/response.Response'
      summary: api admin home
      tags:
      - Admin
  /admin/coupons:
    get:
      operationId: ListAllCoupons
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count Of Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: List of coupons
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin and user to list all coupons
      tags:
      - Admin
      - User
    post:
      operationId: CreateNewCoupon
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.CreateCoupon'
      responses:
        "200":
          description: Coupon created successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to create a cooupon
      tags:
      - Admin
    put:
      operationId: UpdateCoupon
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCoupon'
      responses:
        "200":
          description: Coupon updated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to update a cooupon
      tags:
      - Admin
  /admin/coupons/{id}:
    delete:
      operationId: DeleteCoupon
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Coupon deleted successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to delete a cooupon
      tags:
      - Admin
  /admin/login:
    post:
      operationId: AdminLogin
      parameters:
      - description: Credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.LoginData'
      responses:
        "200":
          description: successfully logged in
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to login
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Generate JWT failure
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to login
      tags:
      - Admin
  /admin/products:
    post:
      operationId: AddCategory
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.CategoryReq'
      responses:
        "200":
          description: Successfuly added a new brand/Category in database
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid entry
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to add a parent category or child brand
      tags:
      - Admin
    put:
      operationId: UpdateProduct
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.DeleteProductReq'
      responses:
        "200":
          description: Successfuly deleted product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Missing or invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to delete a product
      tags:
      - Admin
  /admin/products/product-item:
    post:
      operationId: AddProductItem
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.ProductItemReq'
      responses:
        "200":
          description: Product item added successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to add product item
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to add product item for particular product
      tags:
      - Admin
  /admin/return-request:
    get:
      consumes:
      - application/json
      description: List all return request
      produces:
      - application/json
      responses:
        "200":
          description: Return Request List
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid inputs
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      summary: List all return request
      tags:
      - Admin
  /admin/sales-report:
    get:
      operationId: SalesReport
      responses:
        "400":
          description: Missing or Invalid inputs
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong! failed to generate sales report
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to download sales report as csv format
      tags:
      - Admin
  /admin/users:
    get:
      operationId: ListUsers
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count Of Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: List user successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid inputs
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to get all users
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to list users
      tags:
      - Admin
  /admin/users/block:
    patch:
      operationId: BlockUser
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UserID'
      responses:
        "200":
          description: Successfully changed user block_status
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to block or unblock user
      tags:
      - Admin
  /admin/users/orders:
    patch:
      operationId: ChangeOrderStatus
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateStatus'
      responses:
        "200":
          description: Order status updated successfully!
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing inputs
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      summary: api for admin to change order status of user
      tags:
      - Admin
  /admin/users/orders/delivery-update:
    patch:
      consumes:
      - application/json
      description: Update delivery status of user orders
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateStatus'
      produces:
      - application/json
      responses:
        "200":
          description: Delivery Status Updated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid Request Body
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update delivery status of user orders
      tags:
      - Admin
  /admin/users/orders/return-order/approval:
    patch:
      consumes:
      - application/json
      description: Approve return order
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.ApproveReturnRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Return Order Approved
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid Request Body
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      summary: Approve return order
      tags:
      - Admin
  /brands:
    get:
      operationId: ListBrands-admin
      responses:
        "200":
          description: Successfuly listed all brands
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to get brands
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin and user to list all brands
      tags:
      - Admin
      - User
  /cart:
    delete:
      description: user can delete a stock in product to cart
      operationId: DeleteCartItem
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.DeleteCartItemReq'
      responses:
        "200":
          description: Successfuly deleted product item from cart
        "500":
          description: Something went wrong!
      security:
      - ApiKeyAuth: []
      summary: api for delete product item from cart
      tags:
      - User
    get:
      description: user can get cart items
      operationId: UserGetCartItems
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count Of Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Successfuly get cart items
      security:
      - ApiKeyAuth: []
      summary: api for user to get cart items
      tags:
      - User
    post:
      description: user can update a stock in product to cart
      operationId: UpdateCart
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCartReq'
      responses:
        "200":
          description: Successfuly updated product item in cart
        "500":
          description: Something went wrong!
      security:
      - ApiKeyAuth: []
      summary: api for update user cart
      tags:
      - User
  /carts/checkout:
    get:
      operationId: CheckoutCart
      responses:
        "200":
          description: Successfuly checked out
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Something went wrong! '
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to checkout cart, apply voucher and proceed for payment
      tags:
      - User
  /carts/checkout/razorpay:
    post:
      operationId: RazorpayPage
      parameters:
      - description: inputs
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.RazorpayReq'
      responses:
        "200":
          description: Checkout successfull
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for create an razorpay order
      tags:
      - User
  /carts/checkout/razorpay/success:
    post:
      operationId: RazorpayVerify
      parameters:
      - description: Payment Method ID
        in: formData
        name: payment_method_id
        required: true
        type: integer
      responses:
        "200":
          description: successfully payment completed and order approved
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to verify razor pay order!
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api user for verify razorpay payment
      tags:
      - User
  /carts/orders:
    get:
      operationId: orderHistory
      responses:
        "200":
          description: Order history successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing user id
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Something went wrong! '
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for admin and user to get all order history made
      tags:
      - User
      - Admin
  /carts/place-order/cod:
    post:
      operationId: PlaceCODOrder
      parameters:
      - description: Payment option ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: successfully order placed in COD
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: invalid input
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: 'Something went wrong! '
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to place an order on cart with COD
      tags:
      - User
  /login:
    post:
      operationId: UserLogin
      parameters:
      - description: Input Fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.LoginData'
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid entry
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong !
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user login
      tags:
      - User
  /login/otp-verify:
    post:
      operationId: UserOtpVerify
      parameters:
      - description: Input Fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.OTPVerify'
      responses:
        "200":
          description: Login successful
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Missing or invalid entry
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to send OTP
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user otp verification
      tags:
      - User
  /logout:
    post:
      description: user can logout
      operationId: UserLogout
      responses:
        "200":
          description: Log out successful
      security:
      - ApiKeyAuth: []
      summary: api for user to logout
      tags:
      - User
  /products:
    get:
      operationId: ListProducts-User
      parameters:
      - description: Page Number
        in: query
        name: page_number
        type: integer
      - description: Count Of Order
        in: query
        name: count
        type: integer
      responses:
        "200":
          description: Product listed successfuly
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: failed to get all products
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user and admin to list all products
      tags:
      - User
      - Admin
  /signup:
    post:
      operationId: UserSignUp
      parameters:
      - description: Input Fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.SignupUserData'
      responses:
        "200":
          description: Account created successfuly
        "400":
          description: invalid entry
      security:
      - ApiKeyAuth: []
      summary: api for register user
      tags:
      - User
  /wallet/history:
    get:
      description: user can get wallet history
      operationId: GetWalletHistory
      responses:
        "200":
          description: Get wallet history successful
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to get wallet history
      tags:
      - User
  /wishlist:
    get:
      description: user can get wishlist
      operationId: GetWishlist
      responses:
        "200":
          description: Get wishlist successful
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to get wishlist
      tags:
      - User
  /wishlist/{id}:
    delete:
      description: user can delete product from wishlist
      operationId: DeleteFromWishlist
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Delete product from wishlist successful
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to delete product from wishlist
      tags:
      - User
  /wishlist/{product_id}:
    post:
      description: user can add product to wishlist
      operationId: AddToWishlist
      parameters:
      - description: Input Field
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/request.AddToWishlist'
      responses:
        "200":
          description: Add product to wishlist successful
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Something went wrong!
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - ApiKeyAuth: []
      summary: api for user to add product to wishlist
      tags:
      - User
swagger: "2.0"
